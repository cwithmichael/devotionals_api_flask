# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.category import Category
from swagger_server.models.tag import Tag
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Devotional(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, brief: str=None, content: str=None, verses: List[str]=None, publish_date: str=None, modification_date: str=None, category: Category=None, name: str=None, photo_urls: List[str]=None, tags: List[Tag]=None):
        """
        Devotional - a model defined in Swagger

        :param id: The id of this Devotional.
        :type id: int
        :param brief: The brief of this Devotional.
        :type brief: str
        :param content: The content of this Devotional.
        :type content: str
        :param verses: The verses of this Devotional.
        :type verses: List[str]
        :param publish_date: The publish_date of this Devotional.
        :type publish_date: str
        :param modification_date: The modification_date of this Devotional.
        :type modification_date: str
        :param category: The category of this Devotional.
        :type category: Category
        :param name: The name of this Devotional.
        :type name: str
        :param photo_urls: The photo_urls of this Devotional.
        :type photo_urls: List[str]
        :param tags: The tags of this Devotional.
        :type tags: List[Tag]
        """
        self.swagger_types = {
            'id': int,
            'brief': str,
            'content': str,
            'verses': List[str],
            'publish_date': str,
            'modification_date': str,
            'category': Category,
            'name': str,
            'photo_urls': List[str],
            'tags': List[Tag]
        }

        self.attribute_map = {
            'id': 'id',
            'brief': 'brief',
            'content': 'content',
            'verses': 'verses',
            'publish_date': 'publishDate',
            'modification_date': 'modificationDate',
            'category': 'category',
            'name': 'name',
            'photo_urls': 'photoUrls',
            'tags': 'tags'
        }

        self._id = id
        self._brief = brief
        self._content = content
        self._verses = verses
        self._publish_date = publish_date
        self._modification_date = modification_date
        self._category = category
        self._name = name
        self._photo_urls = photo_urls
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Devotional':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Devotional of this Devotional.
        :rtype: Devotional
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Devotional.

        :return: The id of this Devotional.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Devotional.

        :param id: The id of this Devotional.
        :type id: int
        """

        self._id = id

    @property
    def brief(self) -> str:
        """
        Gets the brief of this Devotional.

        :return: The brief of this Devotional.
        :rtype: str
        """
        return self._brief

    @brief.setter
    def brief(self, brief: str):
        """
        Sets the brief of this Devotional.

        :param brief: The brief of this Devotional.
        :type brief: str
        """

        self._brief = brief

    @property
    def content(self) -> str:
        """
        Gets the content of this Devotional.

        :return: The content of this Devotional.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """
        Sets the content of this Devotional.

        :param content: The content of this Devotional.
        :type content: str
        """

        self._content = content

    @property
    def verses(self) -> List[str]:
        """
        Gets the verses of this Devotional.

        :return: The verses of this Devotional.
        :rtype: List[str]
        """
        return self._verses

    @verses.setter
    def verses(self, verses: List[str]):
        """
        Sets the verses of this Devotional.

        :param verses: The verses of this Devotional.
        :type verses: List[str]
        """

        self._verses = verses

    @property
    def publish_date(self) -> str:
        """
        Gets the publish_date of this Devotional.

        :return: The publish_date of this Devotional.
        :rtype: str
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date: str):
        """
        Sets the publish_date of this Devotional.

        :param publish_date: The publish_date of this Devotional.
        :type publish_date: str
        """

        self._publish_date = publish_date

    @property
    def modification_date(self) -> str:
        """
        Gets the modification_date of this Devotional.

        :return: The modification_date of this Devotional.
        :rtype: str
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date: str):
        """
        Sets the modification_date of this Devotional.

        :param modification_date: The modification_date of this Devotional.
        :type modification_date: str
        """

        self._modification_date = modification_date

    @property
    def category(self) -> Category:
        """
        Gets the category of this Devotional.

        :return: The category of this Devotional.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category: Category):
        """
        Sets the category of this Devotional.

        :param category: The category of this Devotional.
        :type category: Category
        """

        self._category = category

    @property
    def name(self) -> str:
        """
        Gets the name of this Devotional.

        :return: The name of this Devotional.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Devotional.

        :param name: The name of this Devotional.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def photo_urls(self) -> List[str]:
        """
        Gets the photo_urls of this Devotional.

        :return: The photo_urls of this Devotional.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls: List[str]):
        """
        Sets the photo_urls of this Devotional.

        :param photo_urls: The photo_urls of this Devotional.
        :type photo_urls: List[str]
        """
        if photo_urls is None:
            raise ValueError("Invalid value for `photo_urls`, must not be `None`")

        self._photo_urls = photo_urls

    @property
    def tags(self) -> List[Tag]:
        """
        Gets the tags of this Devotional.

        :return: The tags of this Devotional.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """
        Sets the tags of this Devotional.

        :param tags: The tags of this Devotional.
        :type tags: List[Tag]
        """

        self._tags = tags

